{"version":3,"sources":["components/FileUpload/FileUpload.tsx","util/csv.ts","util/tmdb.ts","components/Results/Results.tsx","components/DetailsModal/DetailsModal.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","styled","div","props","isDragAccept","isDragReject","isDragActive","getColor","FileUpload","onDrop","useDropzone","maxFiles","accept","getRootProps","getInputProps","Grid","item","xs","className","parseData","csvData","a","csv","fromString","TMBD","lbData","ratingRange","httpClient","watchedFilms","this","map","r","Name","filter","m","parseFloat","Rating","axios","create","baseURL","headers","Authorization","apiKey","Promise","all","movie","get","encodeURIComponent","Year","res","searchResults","data","results","rating","getTMBDMovies","ratedMovies","id","recs","unwatchedRecs","f","_","includes","title","recommendations","slice","filteredRecs","uniqBy","rec","length","isNull","backdrop_path","poster_path","common","flatten","groupBy","orderBy","value","MoviePoster","img","Results","openModal","container","direction","spacing","justify","alignItems","Typography","variant","key","href","rel","target","alt","src","overview","Divider","Tooltip","placement","onClick","DetailsModal","open","onClose","releaseYear","Date","release_date","getFullYear","Dialog","style","padding","DialogTitle","IconButton","Launch","width","CSVDownloadLink","CSVLink","App","useState","file","setFile","setCSVData","setResults","csvExport","setCSVExport","enableCSVDownload","setEnableCSVDownload","setRatingRange","loading","setLoading","isOpen","modalState","setModalState","useCallback","files","name","reader","FileReader","onload","result","readAsText","useEffect","csvJson","tmdb","getRecommendations","apiResults","uniqueRecs","updatedCSVExport","unshift","getData","gutterBottom","Help","Slider","valueLabelDisplay","step","marks","min","max","onChange","e","newValue","disabled","Button","filename","CircularProgress","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.da0152e3.chunk.js","sourcesContent":["import { Grid } from '@material-ui/core';\nimport React from 'react';\nimport { DropEvent, DropzoneRootProps, FileRejection, useDropzone } from 'react-dropzone';\nimport styled from 'styled-components';\n\nconst getColor = (props: DropzoneRootProps) => {\n  if (props.isDragAccept) {\n    return '#00e676';\n  }\n  if (props.isDragReject) {\n    return '#ff1744';\n  }\n  if (props.isDragActive) {\n    return '#2196f3';\n  }\n  return '#eeeeee';\n};\n\nconst Container = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  border-width: 2px;\n  border-radius: 2px;\n  border-color: ${(props: DropzoneRootProps) => getColor(props)};\n  border-style: dashed;\n  background-color: #fafafa;\n  color: #bdbdbd;\n  outline: none;\n  transition: border 0.24s ease-in-out;\n`;\n\ninterface Props {\n  onDrop: <T extends File>(acceptedFiles: T[], fileRejections: FileRejection[], event: DropEvent) => void;\n}\n\nconst FileUpload = ({ onDrop }: Props) => {\n  const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone({\n    onDrop,\n    maxFiles: 1,\n    accept: '.csv'\n  });\n\n  return (\n    <Grid item xs={12}>\n      <Container {...getRootProps({ className: 'dropzone', isDragActive, isDragAccept, isDragReject })}>\n        <input {...getInputProps()} />\n        <p>Drag and drop ratings.csv here, or click to select file</p>\n      </Container>\n    </Grid>\n  );\n};\n\nexport default FileUpload;\n","import csv from 'csvtojson';\nimport { RatingCSVRow } from '../types/letterboxd';\n\n/**\n * Convert CSV ratings to JSON format\n *\n * @param csvData {string} CSV-formatted Letterboxd ratings\n *\n * @returns {Promise<RatingCSVRow[]>} JSON representation of CSV ratings\n */\nexport async function parseData(csvData: string): Promise<RatingCSVRow[]> {\n  return (await csv().fromString(csvData)) as RatingCSVRow[];\n}\n","import axios, { AxiosInstance } from 'axios';\nimport _ from 'lodash';\nimport { SearchResult, Movie, APIResult } from '../types/tmdb';\nimport { apiKey } from '../config/config.json';\nimport { RatingCSVRow } from '../types/letterboxd';\n\nexport default class TMBD {\n  httpClient: AxiosInstance;\n  lbData: RatingCSVRow[];\n  watchedFilms: string[];\n\n  constructor(lbData: RatingCSVRow[], ratingRange: number[]) {\n    // List of watched film titles\n    this.watchedFilms = lbData.map(r => r.Name);\n\n    // Filter data in rating range\n    this.lbData = lbData.filter(m => parseFloat(m.Rating) >= ratingRange[0] && parseFloat(m.Rating) <= ratingRange[1]);\n    this.httpClient = axios.create({\n      baseURL: 'https://api.themoviedb.org/3',\n      headers: {\n        Authorization: `Bearer ${apiKey}`\n      }\n    });\n  }\n\n  async getTMBDMovies(): Promise<Movie[]> {\n    // Search TMDB for corresponding movie from Letterboxd data\n    return (await Promise.all(\n      this.lbData.map(async movie => {\n        const res = await this.httpClient.get(\n          `/search/movie?query=${encodeURIComponent(movie.Name)}&year=${movie.Year}`\n        );\n\n        // Most matching search result given title and year\n        // Not perfect but works most of the time\n        const searchResults = res.data as SearchResult;\n        return { ...searchResults.results[0], rating: movie.Rating };\n      })\n    )) as Movie[];\n  }\n\n  async getRecommendations(): Promise<APIResult> {\n    const ratedMovies = await this.getTMBDMovies();\n\n    // Get recommendations for each highly-rated movie\n    const recommendations = await Promise.all(\n      ratedMovies.map(async movie => {\n        const res = await this.httpClient.get(`/movie/${movie.id}/recommendations`);\n        const recs = res.data as SearchResult;\n\n        const unwatchedRecs = recs.results.filter(f => !_.includes(this.watchedFilms, f.title));\n\n        return {\n          movie,\n          recommendations: unwatchedRecs.slice(0, 5)\n        };\n      })\n    );\n\n    // Unique recommendations that have valid images\n    const filteredRecs = _.uniqBy(recommendations, rec => rec.movie.id).filter(\n      rec => rec.recommendations.length > 0 && !_.isNull(rec.movie.backdrop_path && !_.isNull(rec.movie.poster_path))\n    );\n\n    // 5 most common recommendations accross all movies\n    const common = _(recommendations.map(r => r.recommendations))\n      .flatten()\n      .groupBy('id')\n      .orderBy(f => f.length, 'desc')\n      .flatten()\n      .uniqBy((m: Movie) => m.id)\n      .value()\n      .slice(0, 5);\n\n    // TODO: Filter out films that exist in watched\n    return {\n      common,\n      recommendations: filteredRecs\n    };\n  }\n}\n","import React from 'react';\nimport { Divider, Grid, Tooltip, Typography } from '@material-ui/core';\nimport { APIResult, Movie } from '../../types/tmdb';\nimport styled from 'styled-components';\n\ninterface Props {\n  results: APIResult;\n  openModal: Function;\n}\n\nconst MoviePoster = styled.img`\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst Results = ({ results, openModal }: Props) => {\n  return (\n    <Grid container direction=\"column\" spacing={2}>\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n        <Grid item xs={12}>\n          <Typography variant=\"h3\">Most Common Recommendations</Typography>\n        </Grid>\n        <Grid item container direction=\"row\" spacing={2}>\n          {results.common.map(movie => (\n            <Grid item key={movie.id} xs>\n              <Typography variant=\"h5\">{movie.title}</Typography>\n              <a href={`https://themoviedb.org/movie/${movie.id}`} rel=\"noopener noreferrer\" target=\"_blank\">\n                <img alt={`${movie.title}-poster`} src={`https://image.tmdb.org/t/p/w300${movie.backdrop_path}`} />\n              </a>\n              <Typography variant=\"body1\">{movie.overview}</Typography>\n            </Grid>\n          ))}\n        </Grid>\n      </Grid>\n      <Divider />\n      {results.recommendations.map(rec => (\n        <Grid item key={rec.movie.id}>\n          <Typography variant=\"h5\">\n            Based on {rec.movie.title}\n            {rec.movie.rating ? ` (${rec.movie.rating})` : ''}\n          </Typography>\n          <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n            {rec.recommendations.map((m: Movie) => (\n              <Grid item key={m.id} xs>\n                <Tooltip title={m.title} placement=\"right\">\n                  <MoviePoster\n                    key={m.id}\n                    alt={`${m.title}-poster`}\n                    src={`https://image.tmdb.org/t/p/w154${m.poster_path}`}\n                    onClick={() => openModal(m)}\n                  />\n                </Tooltip>\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default Results;\n","import { Dialog, DialogTitle, Grid, IconButton, Typography } from '@material-ui/core';\nimport { Launch } from '@material-ui/icons';\nimport React from 'react';\nimport { Movie } from '../../types/tmdb';\n\ninterface Props {\n  open: boolean;\n  movie: Movie;\n  onClose: (event: {}, reason: 'backdropClick' | 'escapeKeyDown') => void;\n}\n\nconst DetailsModal = ({ movie, open, onClose }: Props) => {\n  const releaseYear = new Date(movie.release_date).getFullYear();\n\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" style={{ padding: '12px' }}>\n        <Grid item xs>\n          <DialogTitle>\n            {`${movie.title} (${releaseYear})`}{' '}\n            <IconButton href={`https://themoviedb.org/movie/${movie.id}`} rel=\"noopener noreferrer\" target=\"_blank\">\n              <Launch />\n            </IconButton>\n          </DialogTitle>\n        </Grid>\n        <Grid item xs={12}>\n          <img\n            style={{ width: '100%' }}\n            alt={`${movie.title}-poster`}\n            src={`https://image.tmdb.org/t/p/original${movie.backdrop_path}`}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"body1\">{movie.overview}</Typography>\n        </Grid>\n      </Grid>\n    </Dialog>\n  );\n};\n\nexport default DetailsModal;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { CSVLink } from 'react-csv';\nimport _ from 'lodash';\nimport FileUpload from './components/FileUpload';\nimport { APIResult, Movie } from './types/tmdb';\nimport { parseData } from './util/csv';\nimport TMBD from './util/tmdb';\nimport Results from './components/Results';\nimport { Button, CircularProgress, Grid, IconButton, Slider, Tooltip, Typography } from '@material-ui/core';\nimport { Help } from '@material-ui/icons';\nimport styled from 'styled-components';\nimport DetailsModal from './components/DetailsModal';\n\nconst CSVDownloadLink = styled(CSVLink)`\n  text-decoration: none;\n  color: inherit;\n`;\n\ninterface ModalState {\n  isOpen: boolean;\n  movie: Movie | null;\n}\n\nconst App = () => {\n  const [file, setFile] = useState<string | null>(null);\n  const [csvData, setCSVData] = useState<string | null>(null);\n  const [results, setResults] = useState<APIResult | null>(null);\n  const [csvExport, setCSVExport] = useState<string[][]>([[]]);\n  const [enableCSVDownload, setEnableCSVDownload] = useState<boolean>(false);\n  const [ratingRange, setRatingRange] = useState<number[]>([4.5, 5.0]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [modalState, setModalState] = useState<ModalState>({ isOpen: false, movie: null });\n\n  // Parse CSV content as text and set state accordingly\n  const onDrop = useCallback(files => {\n    const csv = files[0];\n    setFile(csv.name);\n    setLoading(true);\n    const reader = new FileReader();\n    reader.onload = () => {\n      setCSVData(reader.result as string);\n    };\n    reader.readAsText(csv);\n  }, []);\n\n  useEffect(() => {\n    async function getData() {\n      if (csvData !== null) {\n        const csvJson = await parseData(csvData);\n        const tmdb = new TMBD(csvJson, ratingRange);\n        const apiResults = await tmdb.getRecommendations();\n\n        setResults(apiResults);\n        setLoading(false);\n\n        // Flatten and dedupe recommendations for CSV export\n        const recs = apiResults.recommendations.map(r => r.recommendations);\n        const uniqueRecs = _.uniqBy(_.flatten(recs), (m: Movie) => m.id);\n\n        const updatedCSVExport = uniqueRecs.map(m => {\n          return [m.release_date, m.title];\n        });\n\n        updatedCSVExport.unshift(['Date', 'Name']);\n        setCSVExport(updatedCSVExport);\n        setEnableCSVDownload(true);\n      }\n    }\n    getData();\n  }, [csvData, ratingRange]);\n\n  const clear = () => {\n    setFile(null);\n    setResults(null);\n    setCSVData(null);\n    setEnableCSVDownload(false);\n    setCSVExport([[]]);\n  };\n\n  const openModal = (movie: Movie) => {\n    setModalState({ isOpen: true, movie });\n  };\n\n  const closeModal = () => {\n    setModalState({ isOpen: false, movie: null });\n  };\n\n  return (\n    <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" style={{ padding: '12px' }}>\n      {modalState.movie !== null && (\n        <DetailsModal open={modalState.isOpen} movie={modalState.movie} onClose={closeModal} />\n      )}\n      {file === null && <FileUpload onDrop={onDrop} />}\n      <Grid item xs={12}>\n        <Typography gutterBottom>\n          Valid Rating Range (Your Ratings){' '}\n          <Tooltip title=\"Set the min/max rating value to be considered for recommendations\">\n            <IconButton>\n              <Help />\n            </IconButton>\n          </Tooltip>\n        </Typography>\n        <Slider\n          value={ratingRange}\n          valueLabelDisplay=\"auto\"\n          step={0.5}\n          marks\n          min={0.5}\n          max={5.0}\n          onChange={(e: any, newValue: number | number[]) => {\n            setRatingRange(newValue as number[]);\n          }}\n          disabled={file !== null}\n        />\n      </Grid>\n      <Grid item>\n        <Button onClick={clear}>clear</Button>\n      </Grid>\n      <Grid item>\n        <Button disabled={!enableCSVDownload}>\n          <CSVDownloadLink filename=\"letterboxd-movie-recommendations.csv\" data={csvExport}>\n            Download Results CSV\n          </CSVDownloadLink>\n        </Button>\n      </Grid>\n      <Grid item xs={12}>\n        <ol>\n          <li>\n            <Typography variant=\"subtitle1\">\n              Go to <a href=\"https://letterboxd.com/settings/data\">letterboxd.com/settings/data</a> and click \"Export\n              your data\"\n            </Typography>\n          </li>\n          <li>\n            <Typography variant=\"subtitle1\">Upload \"ratings.csv\" by clicking the \"Upload\" box above</Typography>\n          </li>\n          <li>\n            <Typography variant=\"subtitle1\">\n              Page will populate with recommendations based on your Letterboxd ratings!\n            </Typography>\n          </li>\n          <li>\n            <Typography variant=\"subtitle1\">\n              You can download a CSV of all the recommended films and import them into a Letterboxd list or watchlist\n            </Typography>\n          </li>\n        </ol>\n      </Grid>\n      {results && <Results results={results} openModal={openModal} />}\n      {loading && <CircularProgress />}\n    </Grid>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
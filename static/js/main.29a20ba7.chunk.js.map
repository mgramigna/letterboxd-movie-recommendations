{"version":3,"sources":["components/FileUpload/FileUpload.tsx","util/csv.ts","util/tmdb.ts","components/Results/Results.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","styled","div","props","isDragAccept","isDragReject","isDragActive","getColor","FileUpload","onDrop","useDropzone","maxFiles","accept","getRootProps","getInputProps","Grid","item","xs","className","parseData","csvData","ratingRange","a","csv","fromString","lbData","highestRatedData","filter","m","parseFloat","Rating","TMBD","httpClient","this","axios","create","baseURL","headers","Authorization","apiKey","Promise","all","map","movie","get","encodeURIComponent","Name","res","data","searchResults","r","total_results","results","getTMBDMovies","ratedMovies","id","recs","recommendations","slice","filteredRecs","_","uniqBy","rec","length","isNull","backdrop_path","poster_path","common","flatten","groupBy","orderBy","f","value","Results","container","direction","spacing","Typography","variant","key","justify","alt","title","src","overview","Tooltip","placement","href","rel","target","Divider","orientation","CSVDownloadLink","CSVLink","RatingSlider","Slider","App","useState","file","setFile","setCSVData","setResults","csvExport","setCSVExport","enableCSVDownload","setEnableCSVDownload","setRatingRange","loading","setLoading","useCallback","files","name","reader","FileReader","onload","result","readAsText","useEffect","csvJson","tmdb","getRecommendations","apiResults","combined","concat","uniqueCombined","updatedCSVExport","release_date","unshift","getData","alignItems","gutterBottom","IconButton","Help","valueLabelDisplay","step","marks","min","max","onChange","e","newValue","disabled","Button","onClick","filename","CircularProgress","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.29a20ba7.chunk.js","sourcesContent":["import { Grid } from '@material-ui/core';\nimport React from 'react';\nimport { DropEvent, DropzoneRootProps, FileRejection, useDropzone } from 'react-dropzone';\nimport styled from 'styled-components';\n\nconst getColor = (props: DropzoneRootProps) => {\n  if (props.isDragAccept) {\n    return '#00e676';\n  }\n  if (props.isDragReject) {\n    return '#ff1744';\n  }\n  if (props.isDragActive) {\n    return '#2196f3';\n  }\n  return '#eeeeee';\n};\n\nconst Container = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  border-width: 2px;\n  border-radius: 2px;\n  border-color: ${(props: DropzoneRootProps) => getColor(props)};\n  border-style: dashed;\n  background-color: #fafafa;\n  color: #bdbdbd;\n  outline: none;\n  transition: border 0.24s ease-in-out;\n`;\n\ninterface Props {\n  onDrop: <T extends File>(acceptedFiles: T[], fileRejections: FileRejection[], event: DropEvent) => void;\n}\n\nconst FileUpload = ({ onDrop }: Props) => {\n  const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone({\n    onDrop,\n    maxFiles: 1,\n    accept: '.csv'\n  });\n\n  return (\n    <Grid item xs={12}>\n      <Container {...getRootProps({ className: 'dropzone', isDragActive, isDragAccept, isDragReject })}>\n        <input {...getInputProps()} />\n        <p>Drag and drop ratings.csv here, or click to select file</p>\n      </Container>\n    </Grid>\n  );\n};\n\nexport default FileUpload;\n","import csv from 'csvtojson';\nimport { RatingCSVRow } from '../types/letterboxd';\n\nexport async function parseData(csvData: string, ratingRange: number[]): Promise<RatingCSVRow[]> {\n  const lbData = (await csv().fromString(csvData)) as RatingCSVRow[];\n\n  // Only consider films rated 4.5 or 5 stars\n  const highestRatedData = lbData.filter(\n    m => parseFloat(m.Rating) >= ratingRange[0] && parseFloat(m.Rating) <= ratingRange[1]\n  );\n  return highestRatedData;\n}\n","import axios, { AxiosInstance } from 'axios';\nimport _ from 'lodash';\nimport { SearchResult, Movie, APIResult } from '../types/tmdb';\nimport { apiKey } from '../config/config.json';\nimport { RatingCSVRow } from '../types/letterboxd';\n\nexport default class TMBD {\n  httpClient: AxiosInstance;\n  lbData: RatingCSVRow[];\n\n  constructor(lbData: RatingCSVRow[]) {\n    this.lbData = lbData;\n    this.httpClient = axios.create({\n      baseURL: 'https://api.themoviedb.org/3',\n      headers: {\n        Authorization: `Bearer ${apiKey}`\n      }\n    });\n  }\n\n  async getTMBDMovies(): Promise<Movie[]> {\n    // Search TMDB for corresponding movie from Letterboxd data\n    const searchResults = (await Promise.all(\n      this.lbData.map(async movie => {\n        const res = await this.httpClient.get(`/search/movie?query=${encodeURIComponent(movie.Name)}`);\n        return res.data;\n      })\n    )) as SearchResult[];\n\n    // First search result is most popular\n    // TODO: Add some type of filter that guarantees movies match\n    return searchResults.filter(r => r.total_results > 0).map(r => r.results[0]);\n  }\n\n  async getRecommendations(): Promise<APIResult> {\n    const ratedMovies = await this.getTMBDMovies();\n\n    // Get recommendations for each highly-rated movie\n    const recommendations = await Promise.all(\n      ratedMovies.map(async movie => {\n        const res = await this.httpClient.get(`/movie/${movie.id}/recommendations`);\n        const recs = res.data as SearchResult;\n        return {\n          movie,\n          recommendations: recs.results.slice(0, 5)\n        };\n      })\n    );\n\n    const filteredRecs = _.uniqBy(recommendations, rec => rec.movie.id).filter(\n      rec => rec.recommendations.length > 0 && !_.isNull(rec.movie.backdrop_path && !_.isNull(rec.movie.poster_path))\n    );\n\n    // 5 most common recommendations accross all movies\n    const common = _(recommendations.map(r => r.recommendations))\n      .flatten()\n      .groupBy('id')\n      .orderBy(f => f.length, 'desc')\n      .flatten()\n      .uniqBy((m: Movie) => m.id)\n      .value()\n      .slice(0, 5);\n\n    // TODO: Filter out films that exist in watched\n    return {\n      common,\n      recommendations: filteredRecs\n    };\n  }\n}\n","import React from 'react';\nimport { Divider, Grid, Tooltip, Typography } from '@material-ui/core';\nimport { APIResult, Movie } from '../../types/tmdb';\n\ninterface Props {\n  results: APIResult;\n}\n\nconst Results = ({ results }: Props) => {\n  return (\n    <Grid container direction=\"column\" spacing={2}>\n      <Grid item xs={12}>\n        <Typography variant=\"h3\">Most Common Recommendations</Typography>\n      </Grid>\n      {results.common.map(movie => (\n        <Grid container key={movie.id} direction=\"row\" justify=\"center\">\n          <Grid item xs={3}>\n            <img alt={`${movie.title}-poster`} src={`https://image.tmdb.org/t/p/w300${movie.backdrop_path}`} />\n          </Grid>\n          <Grid item xs>\n            <Typography variant=\"h5\">{movie.title}</Typography>\n            <Typography variant=\"body1\">{movie.overview}</Typography>\n          </Grid>\n        </Grid>\n      ))}\n      <Grid container direction=\"row\">\n        <Grid item xs={2}>\n          <Typography variant=\"h3\">Movie</Typography>\n        </Grid>\n        <Grid item xs>\n          <Typography variant=\"h3\">Recommended Movies</Typography>\n        </Grid>\n      </Grid>\n      {results.recommendations.map(rec => (\n        <Grid item key={rec.movie.id}>\n          <Grid container direction=\"row\">\n            <Grid item xs={2}>\n              <Tooltip title={rec.movie.title} placement=\"right\">\n                <a href={`https://themoviedb.org/movie/${rec.movie.id}`} rel=\"noopener noreferrer\" target=\"_blank\">\n                  <img\n                    alt={`${rec.movie.title}-poster`}\n                    src={`https://image.tmdb.org/t/p/w154${rec.movie.poster_path}`}\n                  />\n                </a>\n              </Tooltip>\n              <Divider orientation=\"vertical\" variant=\"middle\" />\n            </Grid>\n            <Grid item xs>\n              <Grid container direction=\"row\">\n                {rec.recommendations.map((m: Movie) => (\n                  <Grid item key={m.id} xs={2}>\n                    <Tooltip title={m.title} placement=\"right\">\n                      <a href={`https://themoviedb.org/movie/${m.id}`} rel=\"noopener noreferrer\" target=\"_blank\">\n                        <img\n                          key={m.id}\n                          alt={`${m.title}-poster`}\n                          src={`https://image.tmdb.org/t/p/w154${m.poster_path}`}\n                        />\n                      </a>\n                    </Tooltip>\n                  </Grid>\n                ))}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default Results;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { CSVLink } from 'react-csv';\nimport _ from 'lodash';\nimport FileUpload from './components/FileUpload';\nimport { APIResult, Movie } from './types/tmdb';\nimport { parseData } from './util/csv';\nimport TMBD from './util/tmdb';\nimport Results from './components/Results';\nimport { Button, CircularProgress, Grid, IconButton, Slider, Tooltip, Typography } from '@material-ui/core';\nimport { Help } from '@material-ui/icons';\nimport styled from 'styled-components';\n\nconst CSVDownloadLink = styled(CSVLink)`\n  text-decoration: none;\n  color: inherit;\n`;\n\nconst RatingSlider = styled(Slider)`\n  width: 400px;\n`;\n\nconst App = () => {\n  const [file, setFile] = useState<string | null>(null);\n  const [csvData, setCSVData] = useState<string | null>(null);\n  const [results, setResults] = useState<APIResult | null>(null);\n  const [csvExport, setCSVExport] = useState<string[][]>([[]]);\n  const [enableCSVDownload, setEnableCSVDownload] = useState<boolean>(false);\n  const [ratingRange, setRatingRange] = useState<number[]>([4.5, 5.0]);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const onDrop = useCallback(files => {\n    const csv = files[0];\n    setFile(csv.name);\n    setLoading(true);\n    const reader = new FileReader();\n    reader.onload = () => {\n      setCSVData(reader.result as string);\n    };\n    reader.readAsText(csv);\n  }, []);\n\n  useEffect(() => {\n    async function getData() {\n      if (csvData !== null) {\n        const csvJson = await parseData(csvData, ratingRange);\n        const tmdb = new TMBD(csvJson);\n        const apiResults = await tmdb.getRecommendations();\n        setResults(apiResults);\n        setLoading(false);\n\n        const recs = apiResults.recommendations.map(r => r.recommendations);\n\n        const combined = apiResults.common.concat(_.flatten(recs));\n        const uniqueCombined = _.uniqBy(combined, (m: Movie) => m.id);\n        const updatedCSVExport = uniqueCombined.map(m => {\n          return [m.release_date, m.title];\n        });\n\n        updatedCSVExport.unshift(['Date', 'Name']);\n        setCSVExport(updatedCSVExport);\n        setEnableCSVDownload(true);\n      }\n    }\n    getData();\n  }, [csvData, ratingRange]);\n\n  const clear = () => {\n    setFile(null);\n    setResults(null);\n    setCSVData(null);\n    setEnableCSVDownload(false);\n    setCSVExport([[]]);\n  };\n\n  return (\n    <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n      {file === null && <FileUpload onDrop={onDrop} />}\n      <Grid item xs={12}>\n        <Typography gutterBottom>\n          Valid Rating Range (Your Ratings){' '}\n          <Tooltip title=\"Set the min/max rating value to be considered for recommendations\">\n            <IconButton>\n              <Help />\n            </IconButton>\n          </Tooltip>\n        </Typography>\n        <RatingSlider\n          value={ratingRange}\n          valueLabelDisplay=\"auto\"\n          step={0.5}\n          marks\n          min={0.5}\n          max={5.0}\n          onChange={(e: any, newValue: number | number[]) => {\n            setRatingRange(newValue as number[]);\n          }}\n          disabled={file !== null}\n        />\n      </Grid>\n      <Grid item>\n        <Button onClick={clear}>clear</Button>\n      </Grid>\n      <Grid item>\n        <Button disabled={!enableCSVDownload}>\n          <CSVDownloadLink filename=\"letterboxd-movie-recommendations.csv\" data={csvExport}>\n            Download Results CSV\n          </CSVDownloadLink>\n        </Button>\n      </Grid>\n      <Grid item xs={12}>\n        <ol>\n          <li>\n            <Typography variant=\"subtitle1\">\n              Go to <a href=\"https://letterboxd.com/settings/data\">letterboxd.com/settings/data</a> and click \"Export\n              your data\"\n            </Typography>\n          </li>\n          <li>\n            <Typography variant=\"subtitle1\">Upload \"ratings.csv\" by clicking the \"Upload\" box above</Typography>\n          </li>\n          <li>\n            <Typography variant=\"subtitle1\">\n              Page will populate with recommendations based on your Letterboxd ratings!\n            </Typography>\n          </li>\n          <li>\n            <Typography variant=\"subtitle1\">\n              You can download a CSV of all the recommended films and import them into a Letterboxd list or watchlist\n            </Typography>\n          </li>\n        </ol>\n      </Grid>\n      {results && <Results results={results} />}\n      {loading && <CircularProgress />}\n    </Grid>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}